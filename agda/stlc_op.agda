{-# OPTIONS --without-K --safe #-}

module stlc_op where

open import Data.Sum
open import Data.Nat
open import Data.Maybe
open import Data.Nat.Properties
open import Data.Unit hiding (_‚â§_)
open import Data.List hiding (length)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool hiding (_<_; _‚â§_)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; cong; inspect)

-- A few of basic definitions / lemmas

sn‚â§n‚Üí‚ä• : ‚àÄ {n : ‚Ñï} ‚Üí suc n ‚â§ n ‚Üí ‚ä•
sn‚â§n‚Üí‚ä• {suc n} (s‚â§s le) = sn‚â§n‚Üí‚ä• le

‚â§-<‚äé‚â° : ‚àÄ (m n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí (m < n) ‚äé (m ‚â° n)
‚â§-<‚äé‚â° 0 zero z‚â§n = inj‚ÇÇ refl
‚â§-<‚äé‚â° 0 (suc n) z‚â§n = inj‚ÇÅ (s‚â§s z‚â§n)
‚â§-<‚äé‚â° (suc m) (suc n) (s‚â§s mn) with ‚â§-<‚äé‚â° m n mn
‚â§-<‚äé‚â° (suc m) (suc n) (s‚â§s mn) | inj‚ÇÅ le = inj‚ÇÅ (s‚â§s le)
‚â§-<‚äé‚â° (suc m) (suc n) (s‚â§s mn) | inj‚ÇÇ eq = inj‚ÇÇ (cong suc eq)

-- A few of basic definitions / lemmas

case_of_ : ‚àÄ {a b} {A : Set a} {B : Set b} ‚Üí A ‚Üí (A ‚Üí B) ‚Üí B
case x of f = f x

n‚â§ssn : ‚àÄ (n : ‚Ñï) ‚Üí n ‚â§ suc (suc n)
n‚â§ssn zero = z‚â§n
n‚â§ssn (suc n) = s‚â§s (n‚â§ssn n)

sn‚â°m‚Üín‚â§m : ‚àÄ (n m : ‚Ñï) ‚Üí (suc n ‚â° m) ‚Üí n ‚â§ m
sn‚â°m‚Üín‚â§m zero m eq = z‚â§n
sn‚â°m‚Üín‚â§m (suc n) (suc (suc n)) refl = s‚â§s (n‚â§1+n n)

length : ‚àÄ {X : Set} (xs : List X) ‚Üí ‚Ñï
length [] = 0
length (x ‚à∑ xs) = suc (length xs)

-- STLC definition

data Value : Set
data Type : Set

Id = ‚Ñï
Env = List Value
TEnv = List Type

data Type where
  ùîπ : Type
  _‚Ü†_  : Type ‚Üí Type ‚Üí Type

data Term : Set where
  tt : Term
  ff : Term
  var : Id ‚Üí Term
  app : Term ‚Üí Term ‚Üí Term
  lam : Term ‚Üí Term

data Value where
  boolv : Bool ‚Üí Value
  colv : Env ‚Üí Term ‚Üí Value

_‚áì_ : ‚àÄ {X : Set} (xs : List X) (n : ‚Ñï) ‚Üí Maybe X
[]       ‚áì n = nothing
(x ‚à∑ xs) ‚áì n = if n ‚â°·µá (length xs) then just x else xs ‚áì n

data _‚ä¢_‚à∂_ : TEnv ‚Üí Term ‚Üí Type ‚Üí Set where
  ty-tt : ‚àÄ (Œì : TEnv) ‚Üí Œì ‚ä¢ tt ‚à∂ ùîπ
  ty-ff : ‚àÄ (Œì : TEnv) ‚Üí Œì ‚ä¢ ff ‚à∂ ùîπ
  ty-var : ‚àÄ (Œì : TEnv) (x : Id) (œÑ : Type)
    ‚Üí Œì ‚áì x ‚â° just œÑ
    ‚Üí Œì ‚ä¢ var x ‚à∂ œÑ
  ty-app : ‚àÄ (Œì : TEnv) (e1 e2 : Term) (œÑ1 œÑ2 : Type)
    ‚Üí Œì ‚ä¢ e1 ‚à∂ (œÑ1 ‚Ü† œÑ2)
    ‚Üí Œì ‚ä¢ e2 ‚à∂ œÑ1
    ‚Üí Œì ‚ä¢ app e1 e2 ‚à∂ œÑ2
  ty-abs : ‚àÄ (Œì : TEnv) (e : Term) (œÑ1 œÑ2 : Type)
    --‚Üí (œÑ1 ‚à∑ (œÑ1 ‚Ü† œÑ2) ‚à∑ Œì) ‚ä¢ e ‚à∂ œÑ2 -- allows recursive function
    ‚Üí (œÑ1 ‚à∑ Œì) ‚ä¢ e ‚à∂ œÑ2
    ‚Üí Œì ‚ä¢ lam e ‚à∂ (œÑ1 ‚Ü† œÑ2)

data wf-env : Env ‚Üí TEnv ‚Üí Set
data _‚à∂_ : Value ‚Üí Type ‚Üí Set

data wf-env where
  wf-nil  : wf-env [] []
  wf-cons : ‚àÄ (v : Value) (œÑ : Type) (œÅ : Env) (Œì : TEnv)
    ‚Üí v ‚à∂ œÑ
    ‚Üí wf-env œÅ Œì
    ‚Üí wf-env (v ‚à∑ œÅ) (œÑ ‚à∑ Œì)

data _‚à∂_ where
  ty-bool-val : ‚àÄ (v : Bool) ‚Üí (boolv v) ‚à∂ ùîπ
  ty-clo-val : ‚àÄ (œÅ : Env) (Œì : TEnv) (e : Term) (œÑ1 œÑ2 : Type)
    ‚Üí wf-env œÅ Œì
    --‚Üí (œÑ1 ‚à∑ (œÑ1 ‚Ü† œÑ2) ‚à∑ Œì) ‚ä¢ e ‚à∂ œÑ2
    ‚Üí (œÑ1 ‚à∑ Œì) ‚ä¢ e ‚à∂ œÑ2
    ‚Üí (colv œÅ e) ‚à∂ (œÑ1 ‚Ü† œÑ2)

eval : (n : ‚Ñï) (œÅ : Env) (e : Term) ‚Üí Maybe (Maybe Value)
eval zero œÅ e = nothing
eval (suc n) œÅ tt = just (just (boolv true))
eval (suc n) œÅ ff = just (just (boolv false))
eval (suc n) œÅ (var x) = just (œÅ ‚áì x)
eval (suc n) œÅ (app e‚ÇÅ e‚ÇÇ) with eval n œÅ e‚ÇÅ
... | nothing = nothing
... | just nothing = just nothing
... | just (just (boolv x)) = just nothing
... | just (just (colv œÅ‚Ä≤ body)) with eval n œÅ e‚ÇÇ
...                                   | nothing = nothing
...                                   | just nothing = just nothing
...                                   | just (just v) = eval n (v ‚à∑ œÅ‚Ä≤) body
--...                                   | just (just v) = eval n (v ‚à∑ (colv œÅ‚Ä≤ body) ‚à∑ œÅ‚Ä≤) body
eval (suc n) œÅ (lam e) = just (just (colv œÅ e))

wf-length : ‚àÄ (œÅ : Env) (Œì : TEnv) ‚Üí wf-env œÅ Œì ‚Üí length œÅ ‚â° length Œì
wf-length [] [] wf-nil = refl
wf-length (v ‚à∑ œÅ) (œÑ ‚à∑ Œì) (wf-cons v œÑ œÅ Œì x wf) = cong suc (wf-length œÅ Œì wf)

index-max : ‚àÄ {X : Set} (xs : List X) (n : ‚Ñï) (x : X)
  ‚Üí xs ‚áì n ‚â° just x
  ‚Üí n < length xs
index-max [] n x ()
index-max (x ‚à∑ xs) n y eq with n ‚â°·µá (length xs) | ‚â°·µá‚áí‚â° n (length xs)
...                          | false            | _ with m‚â§n‚áím<n‚à®m‚â°n (index-max xs n y eq) -- ‚â§-<‚äé‚â° (suc n) (length xs) (index-max xs n y eq)
...                                                    | inj‚ÇÅ rec-le = s‚â§s (‚â§-trans (n‚â§ssn n) rec-le)
...                                                    | inj‚ÇÇ rec-eq = s‚â§s (sn‚â°m‚Üín‚â§m n (length xs) rec-eq)
index-max (x ‚à∑ xs) n x refl  | true             | p with p tt
...                                                    | refl = ‚â§-refl

index-extend : ‚àÄ {X : Set} (xs : List X) (n : ‚Ñï) (x y : X)
  ‚Üí xs ‚áì n ‚â° just x
  ‚Üí (y ‚à∑ xs) ‚áì n ‚â° just x
index-extend xs n x y eq with n ‚â°·µá (length xs) | ‚â°·µá‚áí‚â° n (length xs)
...                         | false | _ = eq
...                         | true  | p with p tt
...                                        | refl with index-max xs (length xs) x eq
...                                                  | max = ‚ä•-elim (1+n‚â∞n max)

index-safe-ex : ‚àÄ (œÅ : Env) (Œì : TEnv) (i : ‚Ñï) (œÑ : Type)
  ‚Üí wf-env œÅ Œì
  ‚Üí Œì ‚áì i ‚â° just œÑ
  ‚Üí Œ£[ v ‚àà Value ] (œÅ ‚áì i ‚â° just v) √ó (v ‚à∂ œÑ)
index-safe-ex (v‚ÇÅ ‚à∑ œÅ) (œÑ‚ÇÅ ‚à∑ Œì) i œÑ (wf-cons v‚ÇÅ œÑ‚ÇÅ œÅ Œì v‚ÇÅ‚à∂œÑ‚ÇÅ wf) Œì‚áìi rewrite wf-length œÅ Œì wf
  with i ‚â°·µá length Œì | Œì‚áìi
...  | false         | w = index-safe-ex œÅ Œì i œÑ wf w
...  | true          | refl = ‚ü® v‚ÇÅ , ‚ü® refl , v‚ÇÅ‚à∂œÑ‚ÇÅ ‚ü© ‚ü©

full-safety : ‚àÄ (n : ‚Ñï) (e : Term) (œÑ : Type) (œÅ : Env) (Œì : TEnv) (res : Maybe Value)
  ‚Üí Œì ‚ä¢ e ‚à∂ œÑ
  ‚Üí wf-env œÅ Œì
  ‚Üí eval n œÅ e ‚â° just res
  ‚Üí Œ£[ v ‚àà Value ] (just v ‚â° res) √ó (v ‚à∂ œÑ)
full-safety (suc n) tt ùîπ œÅ Œì res wt wf refl = ‚ü® boolv true , ‚ü® refl , ty-bool-val true ‚ü© ‚ü©
full-safety (suc n) ff ùîπ œÅ Œì res wt wf refl = ‚ü® boolv false , ‚ü® refl , ty-bool-val false ‚ü© ‚ü©
full-safety (suc n) (var x) œÑ œÅ Œì res (ty-var Œì x œÑ Œì‚áìx) wf refl      with index-safe-ex œÅ Œì x œÑ wf Œì‚áìx
... | ‚ü® v , ‚ü® œÅ‚áìx , v‚à∂œÑ ‚ü© ‚ü© = ‚ü® v , ‚ü®  sym œÅ‚áìx , v‚à∂œÑ ‚ü© ‚ü©
full-safety (suc n) (lam e) œÑ œÅ Œì res (ty-abs Œì e œÑ1 œÑ2 wt) wf refl =
  ‚ü® (colv œÅ e) , ‚ü® refl , ty-clo-val œÅ Œì e œÑ1 œÑ2 wf wt ‚ü© ‚ü©
full-safety (suc n) (app e1 e2) œÑ œÅ Œì res (ty-app Œì e1 e2 œÑ1 œÑ e1wt e2wt) wf ev
  with eval n œÅ e1 | inspect (eval n œÅ) e1
... | just nothing | Eq.[ eqv1 ] = 
  case full-safety n e1 (œÑ1 ‚Ü† œÑ) œÅ Œì nothing e1wt wf eqv1 of Œª{ () }
... | just (just (boolv b)) | Eq.[ eqv1 ] =
  case full-safety n e1 (œÑ1 ‚Ü† œÑ) œÅ Œì (just (boolv b)) e1wt wf eqv1 of Œª{ ‚ü® (boolv b) , ‚ü® refl , () ‚ü© ‚ü© }
... | just (just (colv œÅ' bd)) | Eq.[ eqv1 ]
  with eval n œÅ e2 | inspect (eval n œÅ) e2 | ev
... | nothing | v2eq        | ()
... | just v2 | Eq.[ eqv2 ] | w
  with full-safety n e1 (œÑ1 ‚Ü† œÑ) œÅ Œì (just (colv œÅ' bd)) e1wt wf eqv1
    |  full-safety n e2  œÑ1      œÅ Œì  v2                   e2wt wf eqv2
... | ‚ü® colv œÅ' bd , ‚ü® refl , clo-tp@(ty-clo-val œÅ' Œì‚ÇÅ bd œÑ1 œÑ wf' app-res-tp) ‚ü© ‚ü©
    | ‚ü® v2' , ‚ü® refl , v2't ‚ü© ‚ü© =
      --let œÅ* = v2' ‚à∑ colv œÅ' bd ‚à∑ œÅ'
          --Œì* = (œÑ1 ‚à∑ (œÑ1 ‚Ü† œÑ) ‚à∑ Œì‚ÇÅ)
      let œÅ* = v2' ‚à∑ œÅ'
          Œì* = (œÑ1 ‚à∑ Œì‚ÇÅ)
          wf* = wf-cons v2' œÑ1 œÅ' Œì‚ÇÅ v2't wf'
          -- (wf-cons v2' œÑ1 (colv œÅ' bd ‚à∑ œÅ') ((œÑ1 ‚Ü† œÑ) ‚à∑ Œì‚ÇÅ) v2't (wf-cons (colv œÅ' bd) (œÑ1 ‚Ü† œÑ) œÅ' Œì‚ÇÅ clo-tp wf'))
       in full-safety n bd œÑ œÅ* Œì* res app-res-tp wf* w

max : ‚àÄ (m n : ‚Ñï) ‚Üí ‚Ñï
max zero zero = zero
max zero (suc n) = suc n
max (suc m) zero = suc m
max (suc m) (suc n) = suc (max m n)

{-
sn : ‚àÄ (e : Term) (œÑ : Type) (œÅ : Env) (Œì : TEnv)
  ‚Üí Œì ‚ä¢ e ‚à∂ œÑ
  ‚Üí wf-env œÅ Œì
  ‚Üí Œ£[ n ‚àà ‚Ñï ] Œ£[ v ‚àà Value ] eval n œÅ e ‚â° just (just v)
sn tt œÑ œÅ Œì wt wf = ‚ü® 1 , ‚ü® (boolv true) , refl ‚ü© ‚ü©
sn ff œÑ œÅ Œì wt wf = ‚ü® 1 , ‚ü® boolv false , refl ‚ü© ‚ü©
sn (var x) œÑ œÅ Œì (ty-var Œì .x .œÑ Œì‚áìx) wf  with index-safe-ex œÅ Œì x œÑ wf Œì‚áìx
... | ‚ü® v , ‚ü® œÅ‚áìx , v‚à∂œÑ ‚ü© ‚ü© = ‚ü® 1 , ‚ü® v , cong just œÅ‚áìx ‚ü© ‚ü©
sn (app e1 e2) œÑ œÅ Œì (ty-app .Œì .e1 .e2 œÑ1 .œÑ e1wt e2wt) wf
  with sn e1 (œÑ1 ‚Ü† œÑ) œÅ Œì e1wt wf
... | ‚ü® n1 , ‚ü® v1 , e1‚áìv1 ‚ü© ‚ü©
  with full-safety n1 e1 (œÑ1 ‚Ü† œÑ) œÅ Œì (just v1) e1wt wf e1‚áìv1
... | ‚ü® (colv œÅ' body) , ‚ü® refl , ty-clo-val œÅ' Œì' .body .œÑ1 .œÑ wfœÅ'Œì' body‚à∂œÑ ‚ü© ‚ü©
  with sn e2 œÑ1 œÅ Œì e2wt wf
... | ‚ü® n2 , ‚ü® v2 , e2‚áìv2 ‚ü© ‚ü©
  with full-safety n2 e2 œÑ1 œÅ Œì (just v2) e2wt wf e2‚áìv2
... | ‚ü® v2 , ‚ü® refl , v2wt ‚ü© ‚ü© = {!!} -- here we don't have the inductive hypothesis for body
sn (lam e) œÑ œÅ Œì wt wf = {!!}
-}
